%% == Compiler & other options ==

{erl_opts, [warn_unused_import, warn_export_vars, warnings_as_errors, verbose, report, debug_info]}.

%% == Dependencies and plugins ==
{deps, [
    {epgsql, "4.7.1"},
    {erlandono, "3.1.3"}
]}.

{plugins, [
    {rebar3_nix, ".*", {git, "https://github.com/erlang-nix/rebar3_nix.git", {tag, "v0.1.1"}}},
    {rebar3_hex, "v7.0.8"},
    {rebar3_ex_doc, "v0.2.25"}
]}.

{ex_doc, [
    {source_url, <<"https://github.com/schonfinkel/migraterl">>},
    {extras, ["README.md", "LICENSE"]},
    {main, "README.md"}
]}.
{hex, [{doc, ex_doc}]}.

{cover_enabled, true}.

%% == Releases ==
{relx, [
    {release, {migraterl, "0.1.0"}, [
        kernel,
        sasl,
        epgsql,
        erlandono,
        migraterl
    ]},

    %% https://rebar3.org/docs/deployment/releases/#modes
    {mode, dev},
    {extended_start_script, true},

    %% the .src form of the configuration files do
    %% not require setting RELX_REPLACE_OS_VARS
    %% {sys_config_src, "./config/sys.config.src"},
    %% {vm_args_src, "./config/vm.args.src"}

    {overlay, [
        {mkdir, "database/system"},
        {copy, "database/system/*", "\{\{output_dir\}\}/database/system/"}
    ]}
]}.

%% == Shell ==
%% apps to auto-boot with `rebar3 shell'; defaults to apps
%% specified in a `relx' tuple, if any.
{shell, [
    {sys_config, "config/local.config"},
    {apps, []}
]}.

%% == Profiles ==
{profiles, [
    %% prod is the default mode when prod
    %% profile is used, so does not have
    %% to be explicitly included like this
    {prod, [
        {relx, [
            {mode, prod}
        ]}
    ]},

    {test, [
        {relx, [
            {overlay, [
                {mkdir, "database/system"},
                {mkdir, "database/migrations"},
                {copy, "database/system/*", "\{\{output_dir\}\}/database/system/"},
                {copy, "database/migrations/*", "\{\{output_dir\}\}/database/migrations/"}
            ]}
        ]}
    ]}
]}.

%% == Common Test ==
{ct_opts, []}.

%% == EUnit Tests ==
{eunit_tests, [
    {dir, test}
]}.
{eunit_opts, [verbose]}.

%% == Escript ==
